# -*- coding: utf-8 -*-
"""FINAL (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DJ1AIVx5FQggrRU0vv6Pzxq7rtd7PO5A

# **FAKE NEWS DETECTION**
"""

#!pip uninstall scikit-learn

#!pip install scikit-learn==1.2.2

#!pip install joblib==1.4.2

"""**unzipping the zip file**"""

!unzip "/content/Dataset.zip"

"""**loading the dataset**"""

import pandas as pd
df=pd.read_csv('/content/fake_and_real_news.csv')

df.head()

"""**splitting the data into coordinates**"""

X=df.loc[:,'Text']
y=df['label']
y

"""# **DATA PREPROCESSING**

**importing nltk downloading the stopword dataset**
"""

import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')
messages=X.copy()
messages.head()

"""**Regular expression substitution,Lowercasing,Splitting,Stemming and removing stopwords**"""

from nltk.stem.porter import PorterStemmer
import re
voc_size=5000
ps=PorterStemmer()
messages=X.copy()
corpus=[]
for i in range(len(messages)):
    review=re.sub('^a-zA-Z',' ',messages[i])
    review=review.lower()
    review=review.split()
    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)
    corpus.append(review)

"""**Result of preprocessed text data**"""

corpus

"""**encoding:transforming categorical data to numerical data**"""

from tensorflow.keras.preprocessing.text import one_hot
onehot=[one_hot(words,voc_size) for words in corpus]
onehot

"""**padding**"""

from tensorflow.keras.utils import pad_sequences
padded_sequences=pad_sequences(onehot,maxlen=20,padding='pre')
padded_sequences

"""# **BIDIRECTIONAL-LONG SHORT TERM MEMORY(Bi-LSTM)**

**importing necessary libraries**
"""

from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Bidirectional

"""**defining the model**"""

model=Sequential()
model.add(Embedding(voc_size,40))
model.add(Bidirectional(LSTM(100)))
model.add(Dense(1,activation='sigmoid'))
model.build(input_shape=(None, 20))

"""**compiling the model and defining model summary**"""

model.compile('adam',metrics=['accuracy'],loss='binary_crossentropy')
model.summary()

"""**Splitting the dataset into train and test sets**"""

import numpy as np
from sklearn.model_selection import train_test_split
X_final = np.array(padded_sequences)
y_final = np.array(y)
X_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.33, random_state=42, stratify=y_final)

"""**fitting the model again: epoch**"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
le.fit(y)
y_train = le.transform(y_train)
y_test = le.transform(y_test)
model.fit(X_train, y_train, epochs=20, validation_data=(X_test, y_test), batch_size=32)

"""**making the model predict on test data**"""

y_pred=model.predict(X_test)

"""**converting predicted probabilities into binary class predictions**"""

y_pred_classes=np.where(y_pred>0.5,1,0)

"""# **ACCURACY CALCULATIONS**

**plotting epoch v/s accuracy and epoch v/s loss for both training data and validation data**
"""

import matplotlib.pyplot as plt
history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test), batch_size=32)
plt.figure(figsize=(24, 10))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.grid(True)
plt.show()

"""**CONNFUSION MATRIX, CLASSIFICATION REPORT, ACCURACY SCORE**"""

from sklearn.metrics import confusion_matrix,classification_report,accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt
y_pred = (model.predict(X_test) > 0.5).astype("int32")
cm = confusion_matrix(y_test, y_pred)

print("Confusion Matrix:")
print(cm)
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

ac=accuracy_score(y_test, y_pred_classes)
print("Accuracy score:",ac)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""# **PREDICTION USING OUR MODEL**"""

def preprocess_text(text):

    review = re.sub('[^a-zA-Z]', ' ', text)
    review = review.lower()
    review = review.split()

    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)

    onehot_rep = one_hot(review, voc_size)

    padded_rep = pad_sequences([onehot_rep], padding='pre', maxlen=20)
    return padded_rep



inp = ["U.S. conservative leader optimistic of common ground on healthcare WASHINGTON (Reuters) - Republicans in the U.S. House of Representatives could achieve common ground on a deal to win support for healthcare legislation on Thursday, after President Donald Trump intervened in negotiations, a conservative leader said on Wednesday. “We’re not there yet, but we’re very optimistic that if we work around the clock between now and Noon tomorrow, that we’re going to be able to hopefully find some common ground,” Representative Mark Meadows, chairman of the conservative House Freedom Caucus, told reporters. Meadows’ group has opposed House Republican healthcare legislation up to now and threatened earlier in the day to block its passage in a Thursday vote."]
inp_processed = preprocess_text(inp[0])
y_pred = model.predict(inp_processed)

if y_pred > 0.5:
    print("The news is real.")
else:
    print("The news is fake.")



inp = ["Top Trump Surrogate BRUTALLY Stabs Him In The Back: ‘He’s Pathetic’ (VIDEO) It s looking as though Republican presidential candidate Donald Trump is losing support even from within his own ranks. You know things are getting bad when even your top surrogates start turning against you, which is exactly what just happened on Fox News when Newt Gingrich called Trump pathetic. Gingrich knows that Trump needs to keep his focus on Hillary Clinton if he even remotely wants to have a chance at defeating her. However, Trump has hurt feelings because many Republicans don t support his sexual assault against women have turned against him, including House Speaker Paul Ryan (R-WI). So, that has made Trump lash out as his own party.Gingrich said on Fox News: Look, first of all, let me just say about Trump, who I admire and I ve tried to help as much as I can. There s a big Trump and a little Trump. The little Trump is frankly pathetic. I mean, he s mad over not getting a phone call? Trump s referring to the fact that Paul Ryan didn t call to congratulate him after the debate. Probably because he didn t win despite what Trump s ego tells him.Gingrich also added: Donald Trump has one opponent. Her name is Hillary Clinton. Her name is not Paul Ryan. It s not anybody else. Trump doesn t seem to realize that the person he should be mad at is himself because he truly is his own worst enemy. This will ultimately lead to his defeat and he will have no one to blame but himself.Watch here via Politico:Featured Photo by Joe Raedle/Getty Images"]
inp_processed = preprocess_text(inp[0])
y_pred = model.predict(inp_processed)
print(y_pred)

if y_pred > 0.5:
    print("The news is real.")
else:
    print("The news is fake.")




#our input to try the result of the model
inp = ["The Indian Space Research Organisation (ISRO) in the early hours of Thursday (January 16, 2025) successfully executed the SpaDeX docking experiment making India the fourth country after the USA, Russia and China this historic feat.The two satellites SDX01 (Chaser) and SDX02 (Target) which were launched by the PSLV C60 on December 30, 2024, successfully docked as the space agency officials from the Mission Operations Complex (MOX) at ISRO Telemetry, Tracking, and Command Network (ISTRAC) oversaw the complex docking procedure.“Docking Success Spacecraft docking successfully completed! A historic moment. Let’s walk through the SpaDeX docking process: Manoeuvre from 15m to 3m hold point completed. Docking initiated with precision, leading to successful spacecraft capture. Retraction completed smoothly, followed by rigidisation for stability. Docking successfully completed. India became the 4th country to achieve successful Space Docking. Congratulations to the entire team! Congratulations to India!,” ISRO posted on X."]
#Preprocess the new input before prediction
inp_processed = preprocess_text(inp[0])
y_pred = model.predict(inp_processed)
print(y_pred)

if y_pred > 0.5:
    print("The news is real.")
else:
    print("The news is fake.")


#our input to try the result of the model
inp = ["For the past year, J.P Nadda, the incumbent president of the Bharatiya Janata Party (BJP), has been on an extended tenure as the party sought to maintain stable leadership during a Lok Sabha election year. With its most recent membership drive crossing the 100 million-mark, the BJP is currently holding polls for its State party units. Following this, a new party President will be elected, as per tradition — unanimously and with the approval of the Rashtriya Swayamsevak Sangh (RSS)."]
#Preprocess the new input before prediction
inp_processed = preprocess_text(inp[0])
y_pred = model.predict(inp_processed)
print(y_pred)

if y_pred > 0.5:
    print("The news is real.")
else:
    print("The news is fake.")

import joblib
joblib.dump(model,'fake_news_detection_model.joblib')

"""# **ACCURACY USING K-FOLD CROSS VALIDATION**"""

from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score
import numpy as np

mykfold = KFold(n_splits=5)
scores = []

for train_index, test_index in mykfold.split(X_test):
    X_train_fold, X_test_fold = X_test[train_index], X_test[test_index]
    y_train_fold, y_test_fold = y_test[train_index], y_test[test_index]

    model.fit(X_train_fold, y_train_fold, epochs=20, verbose=0)

    y_pred_fold = model.predict(X_test_fold)
    y_pred_classes_fold = np.where(y_pred_fold > 0.5, 1, 0)

    fold_accuracy = accuracy_score(y_test_fold, y_pred_classes_fold)
    scores.append(fold_accuracy)

print(np.mean(scores))